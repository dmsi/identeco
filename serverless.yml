service: identeco

frameworkVersion: '3'

provider:
  name: aws
  region: eu-west-1
  profile: dmitry-aws
  runtime: nodejs14.x
  environment:
    TABLE_NAME: ${self:custom.usersTableName}
    BUCKET_NAME: ${self:custom.keysBucketName}
    REGION: ${self:provider.region}
    PRIVATE_KEY_NAME: 'keypair.pem'
    JWKS_JSON_NAME: 'jwks.json'
    PRIVATE_KEY_LENGTH: 2048
    PRIVATE_KEY_LIFETIME: '30 days'
    ACCESS_TOKEN_LIFETIME: '60 minutes'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: ${self:custom.usersTableArn}
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            Fn::Join:
              - '/'
              - - ${self:custom.keysBucketArn}
                - '*'

custom:
  usersTableName: ${self:service}-users
  usersTableArn:
    Fn::GetAtt: [usersTable, Arn]
  keysBucketName: ${self:service}-keys
  keysBucketArn:
    Fn::GetAtt: [keysBucket, Arn]

functions:
  getJwks:
    handler: src/handlers/getJwks.handler
    events:
      - http:
          method: get
          path: '.well-known/jwks.json'
  register:
    handler: src/handlers/register.handler
    events:
      - http:
          method: post
          path: register
  login:
    handler: src/handlers/login.handler
    events:
      - http:
          method: post
          path: login
  refresh:
    handler: src/handlers/refresh.handler
    events:
      - http:
          method: get
          path: refresh
  rotateKeys:
    handler: src/handlers/rotateKeys.handler
    events:
      - schedule: rate(${self:provider.environment.PRIVATE_KEY_LIFETIME})

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    keysBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.keysBucketName}
        AccessControl: Private
