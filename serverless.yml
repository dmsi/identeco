plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-ifelse

service: identeco

frameworkVersion: '3'

# TODO need to make profile conditional only for 'dev' stage
# in order to make it compatible with the GitHub actions because
provider:
  name: aws
  region: eu-west-1
  profile: identeco 
  runtime: nodejs14.x
  environment:
    TABLE_NAME: ${self:service}-${sls:stage}-users
    BUCKET_NAME: ${self:service}-${sls:stage}-keys
    REGION: ${self:provider.region}
    PRIVATE_KEY_NAME: 'keypair.pem'
    JWKS_JSON_NAME: 'jwks.json'
    PRIVATE_KEY_LENGTH: 2048
    PRIVATE_KEY_LIFETIME: '30 days'
    ACCESS_TOKEN_LIFETIME: '60 minutes'

custom:
  usersTableArn:
    Fn::GetAtt: [usersTable, Arn]
  privateKeyObjectArn:
    Fn::Join:
      - '/'
      - - Fn::GetAtt: [keysBucket, Arn]
        - ${self:provider.environment.PRIVATE_KEY_NAME}
  jwksObjectArn:
    Fn::Join:
      - '/'
      - - Fn::GetAtt: [keysBucket, Arn]
        - ${self:provider.environment.JWKS_JSON_NAME}
  serverlessIfElse:
    - If: '"${sls:stage}" == "prod"'
      Exclude:
        provider.profile

functions:
  getJwks:
    handler: src/handlers/getJwks.handler
    events:
      - http:
          method: get
          path: '.well-known/jwks.json'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.jwksObjectArn}

  register:
    handler: src/handlers/register.handler
    events:
      - http:
          method: post
          path: register
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.usersTableArn}

  login:
    handler: src/handlers/login.handler
    events:
      - http:
          method: post
          path: login
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.usersTableArn}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}

  refresh:
    handler: src/handlers/refresh.handler
    events:
      - http:
          method: get
          path: refresh
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}

  rotateKeys:
    handler: src/handlers/rotateKeys.handler
    events:
      - schedule: rate(${self:provider.environment.PRIVATE_KEY_LIFETIME})
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource:
          - ${self:custom.privateKeyObjectArn}
          - ${self:custom.jwksObjectArn}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    keysBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        AccessControl: Private
